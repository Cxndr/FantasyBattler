<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Display Properties
ideal_width = 0; // set later
ideal_height = 192;
zoom = 1; // set later
max_zoom = 1; // set later
display_width = display_get_width();
display_height = display_get_height();
fullscreen = false;

// Get screen aspect ratio
aspect_ratio = display_width / display_height;
aspect_ratio = clamp(aspect_ratio, 16 / 10, 21 / 9 );

// Set ideal width depending on screen aspect ratio
ideal_width = round( ideal_height * aspect_ratio );


// Pixel-Perfect Scaling! - switch ideals to the nearest perfect resolution
if ( display_width mod ideal_width != 0 )
{
    var d = round ( display_width / ideal_width );
    ideal_width = display_width / d ;
}
if ( display_height mod ideal_height != 0 )
{
    var d = round ( display_height / ideal_height );
    ideal_height = display_height / d ;
}


// Check for odd numbers
if ( ideal_width &amp; 1 )
    ideal_width++ ;
if ( ideal_height &amp; 1 )
    ideal_height++ ;


// Calculate Max Zoom
max_zoom = floor( display_width / ideal_width );
zoom = 3; //max_zoom;

    
//Set Views for all rooms        
for ( var i=1; i&lt;=room_last; i++ )
{
    if(room_exists(i))
    {
        room_set_view(i,0,true,0,0,ideal_width,ideal_height,0,0,ideal_width,ideal_height,0,0,0,0,-1);
        room_set_view_enabled(i,true);
    }   
}

// Resize App Surface, GUI Layer &amp; Window
surface_resize(application_surface,ideal_width*zoom,ideal_height*zoom);
display_set_gui_size(display_width,display_height);
window_set_size(ideal_width*zoom,ideal_height*zoom);
alarm[0] = 1; // re-center window

// Go to first room of game
room_goto(room_next(room));




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Center Window
window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Zoom window
if fullscreen = false and (keyboard_check_pressed(ord("Z")))
{
    // Increaze Variable
    zoom++;

    // Lock to max zoom
    if ( zoom &gt; max_zoom)
        zoom = 1;

    // Execute Resize
    window_set_size(ideal_width*zoom, ideal_height*zoom);

    // Resize App Surface to same as window (fixes pixel distortion by enabling sub-pixels for zoom)
        // PERFORMANCE WARNING - Using this scales resolution up when zooming: so 4x zoom is 4 times the resolution. Use with care!
    surface_resize(application_surface,ideal_width*zoom,ideal_height*zoom);

    // Recenter Window
    alarm[0] = 1;
}

if keyboard_check(vk_alt) and keyboard_check_pressed(vk_enter)
{
    if fullscreen = false 
    {
        fullscreen = true;
        
        // Execute Resize
        window_set_size(ideal_width*max_zoom, ideal_height*max_zoom);

        // Resize App Surface to same as window (fixes pixel distortion by enabling sub-pixels for zoom)
            // PERFORMANCE WARNING - Using this scales resolution up when zooming: so 4x zoom is 4 times the resolution. Use with care!
        surface_resize(application_surface,ideal_width*max_zoom,ideal_height*max_zoom);
        
        // Set window to fullscreen
        window_set_fullscreen(true);        
        
    }
    else 
    {
        fullscreen = false;
        
        // Execute Resize
        window_set_size(ideal_width*zoom, ideal_height*zoom);
    
        // Resize App Surface to same as window (fixes pixel distortion by enabling sub-pixels for zoom)
            // PERFORMANCE WARNING - Using this scales resolution up when zooming: so 4x zoom is 4 times the resolution. Use with care!
        surface_resize(application_surface,ideal_width*zoom,ideal_height*zoom);
        
        // Set window to windowed
        window_set_fullscreen(false);
                
        // Recenter Window
        alarm[0] = 1;
    }
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
